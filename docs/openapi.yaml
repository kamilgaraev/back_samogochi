openapi: 3.0.3
info:
  title: 🎮 Tamagotchi API
  description: |
    # Добро пожаловать в Tamagotchi API! 
    
    **Современный API для игры-тамагочи с системой управления стрессом и тревожностью.**
    
    ---
    
    ## 🔐 Аутентификация
    
    API использует **JWT Bearer токены** для аутентификации. 
    
    После успешного логина или регистрации вы получите токен:
    
    ```http
    Authorization: Bearer YOUR_JWT_TOKEN
    ```

    ## 🎨 Система кастомизации

    Игра включает **прогрессивную систему кастомизации**, где новые элементы разблокируются по мере повышения уровня персонажа.

    **Категории кастомизации:**
    - **👔 Гардероб** - одежда и аксессуары персонажа
    - **🛋️ Мебель** - предметы интерьера и окружения

    **Механика разблокировки:**
    - Каждый элемент имеет минимальный уровень для разблокировки
    - Разблокированные элементы доступны для выбора в категории
    - Игрок может выбрать один элемент в каждой подкатегории
    - Выбор элемента сохраняется автоматически

    **Подкатегории:**
    - `wardrobe_shirt`, `wardrobe_pants`, `wardrobe_accessory` - одежда
    - `furniture_table`, `furniture_chair`, `furniture_lamp` - мебель

    ## 📋 Структура ответов
    
    Все ответы API имеют **единообразную структуру**:
    
    ```json
    {
      "success": true,
      "message": "Операция выполнена успешно",
      "data": {
        // Данные ответа
      },
      "player_state": {
        // 🎮 СТАНДАРТИЗИРОВАННЫЙ ОБЪЕКТ ИГРОКА
        // Присутствует во ВСЕХ эндпоинтах (кроме auth)
        "id": 123,
        "level": 5,
        "experience": {...},
        "energy": {...},
        "stress": {...}
        // Полное описание см. ниже
      }
    }
    ```
    
    При ошибках валидации:
    ```json
    {
      "success": false,
      "message": "Ошибки валидации", 
      "errors": {
        "email": ["Введите корректный email"],
        "password": ["Пароль слишком короткий"]
      }
    }
    ```
    
    ## 🎮 PlayerState - ВАЖНО!
    
    **Объект `player_state` присутствует во ВСЕХ API ответах** (кроме auth). Фронтенд получает полное состояние игрока в каждом запросе:
    
    ```json
    {
      "success": true,
      "data": { ... },
      "player_state": {
        "level": 5,
        "energy": { "current": 120, "percentage": 60.0, "status": {"color": "#2196F3"} },
        "stress": { "current": 35, "level": {"value": "normal", "color": "#2196F3"} },
        "capabilities": { "can_perform_micro_actions": true, "can_start_situations": true }
      }
    }
    ```
    
    ## 📋 Полное описание полей player_state
    
    ### 🆔 Базовая информация
    - **`id`** - Уникальный ID профиля игрока (integer)
    - **`user_id`** - ID пользователя-владельца профиля (integer)  
    - **`level`** - Текущий уровень игрока (integer, min: 1)
    
    ### ⭐ Система опыта (`experience`)
    - **`total`** - Общее количество опыта за всё время (integer, min: 0)
    - **`current_level`** - Опыт в пределах текущего уровня, 0-99 (integer)
    - **`to_next_level`** - Сколько опыта нужно до следующего уровня (integer, 1-100)
    - **`progress_percentage`** - Процент прогресса до следующего уровня (float, 0-100)
    
    ### ⚡ Система энергии (`energy`)
    - **`current`** - Текущее количество энергии (integer, 0-200)
    - **`max`** - Максимальное количество энергии (integer, всегда 200)
    - **`percentage`** - Процент от максимальной энергии (float, 0-100)
    - **`status.level`** - Уровень энергии для UI:
      - `"critical"` (0-24%) - 🔴 **Красный**, игрок не может выполнять действия
      - `"low"` (25-49%) - 🟠 **Оранжевый**, ограниченные возможности
      - `"medium"` (50-74%) - 🔵 **Синий**, нормальное состояние
      - `"high"` (75-100%) - 🟢 **Зеленый**, отличное состояние
    - **`status.label`** - Текстовое описание для UI (string)
    - **`status.color`** - HEX цвет для индикаторов (string, например "#2196F3")
    
    ### 😰 Система стресса (`stress`) 
    - **`current`** - Текущий уровень стресса (integer, 0-100)
    - **`percentage`** - Стресс в процентах (float, 0-100)
    - **`level.value`** - Категория стресса для логики:
      - `"low"` (0-20) - 🟢 **Спокойное состояние**, можно браться за сложные задачи
      - `"normal"` (21-50) - 🔵 **Обычное состояние**, всё под контролем
      - `"elevated"` (51-80) - 🟠 **Повышенная тревожность**, нужна релаксация
      - `"high"` (81-100) - 🔴 **Высокий стресс**, срочно нужен отдых
    - **`level.label`** - Русское название уровня стресса (string)
    - **`level.color`** - HEX цвет для UI индикаторов (string)
    - **`level.recommended_actions`** - Массив рекомендаций (array of strings)
    
    ### 😟 Тревожность (`anxiety`)
    - **`current`** - Текущий уровень тревожности (integer, 0-100)
    - **`percentage`** - Тревожность в процентах (float, 0-100)
    
    ### 🕐 Активность игрока (`activity`)
    - **`last_login`** - Время последнего входа (ISO 8601 datetime)
    - **`consecutive_days`** - Количество дней подряд в игре (integer, min: 0)
    - **`can_claim_daily_reward`** - Можно ли получить ежедневную награду (boolean)
    
    ### 😴 Система сна (`sleep`)
    Персонаж засыпает после прохождения определенного количества ситуаций. Во время сна блокируются действия.
    
    **Когда персонаж НЕ спит:**
    - **`is_sleeping`** - `false` (boolean)
    - **`sleeping_until`** - `null`
    - **`situations_until_sleep`** - Сколько ситуаций осталось до сна (integer, min: 0)
    - **`completed_situations`** - Сколько пройдено с последнего сна (integer, min: 0)
    - **`situations_limit`** - Лимит ситуаций до сна из конфига (integer, min: 1)
    
    **Когда персонаж СПИТ:**
    - **`is_sleeping`** - `true` (boolean)
    - **`sleeping_until`** - Время пробуждения (ISO 8601 datetime)
    - **`time_remaining_seconds`** - Секунд до пробуждения (integer)
    - **`time_remaining_minutes`** - Минут до пробуждения (integer)
    - **Для UI:** показать таймер обратного отсчета, заблокировать кнопки действий
    
    ### 🎮 Возможности игрока (`capabilities`)
    - **`can_perform_micro_actions`** - Может ли выполнять микродействия (boolean)
      - `true` если `energy >= 10`
      - **Для UI:** если `false` - кнопки микродействий неактивны, показать "Недостаточно энергии"
    - **`can_start_situations`** - Может ли начинать ситуации (boolean)
      - `true` если `energy >= 20 AND stress <= 80`
      - **Для UI:** если `false` - показать причину (энергия/стресс) и рекомендации
    
    ### ⏰ Временные метки (`timestamps`)
    - **`created_at`** - Дата создания профиля (ISO 8601 datetime)
    - **`updated_at`** - Дата последнего обновления (ISO 8601 datetime)
    
    ### 🎯 Инструкции для фронтендеров:
    - 🎨 **Цвета**: используйте `energy.status.color` и `stress.level.color` для индикаторов
    - 🚫 **Блокировки**: проверяйте `capabilities.*` для активации/деактивации кнопок
    - 📊 **Прогресс**: `experience.progress_percentage` для прогресс-баров
    - 💡 **Рекомендации**: `stress.level.recommended_actions` для подсказок пользователю
    - ⚡ **Статусы**: `energy.status.level` и `stress.level.value` для логики UI
    
    ## 🚀 Быстрый старт
    
    1. **Зарегистрируйтесь**: `POST /auth/register`
    2. **Получите токен**: Используйте его в заголовке `Authorization`
    3. **Исследуйте API**: Все эндпоинты доступны с токеном
    
    ---
    
    ### 🎯 Основные возможности:
    
    - 🔐 **Полная аутентификация** (регистрация, логин, сброс пароля)
    - 👤 **Управление игроком** (профиль, статистика, прогресс) 
    - 🎭 **Игровые ситуации** (случайные, по категориям, с выбором решений)
    - ⚡ **Микродействия** (дыхательные упражнения, физическая активность)
    - 📊 **Аналитика** (статистика игры, поведение игроков)
    - 👑 **Админ-панель** (управление контентом, конфигурации)
    
  version: 1.0.0
  contact:
    name: 💬 API Support
    email: support@tamagotchi-api.com
    url: https://t.me/your_support_chat
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://your-domain.com/terms
    
servers:
  - url: https://stressapi.ru/api
    description: Production server
  - url: http://localhost:8000/api
    description: Development server

tags:
  - name: Authentication
    description: Регистрация, авторизация и управление аккаунтом
  - name: Player
    description: Профиль игрока, статистика и прогресс
  - name: Customization
    description: Кастомизация персонажа и окружения
  - name: Situations
    description: Игровые ситуации и их прохождение
  - name: Micro Actions
    description: Микродействия для управления состоянием
  - name: Admin
    description: Административная панель (только для админов)
  - name: Analytics
    description: Аналитика и статистика игры

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен полученный при логине или регистрации
      
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Иван Иванов"
        email:
          type: string
          format: email
          example: "ivan@example.com"
        is_admin:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: "2025-09-04T06:10:25.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-09-04T06:10:25.000000Z"

    PlayerProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        level:
          type: integer
          minimum: 1
          example: 5
        total_experience:
          type: integer
          minimum: 0
          example: 450
        energy:
          type: integer
          minimum: 0
          maximum: 200
          example: 100
        stress:
          type: integer
          minimum: 0
          maximum: 100
          example: 30
        anxiety:
          type: integer
          minimum: 0
          maximum: 100
          example: 25
        last_login:
          type: string
          format: date-time
          example: "2025-09-04T06:10:25.000000Z"
        last_daily_reward:
          type: string
          format: date-time
          nullable: true
          example: "2025-09-04T00:00:00.000000Z"
        consecutive_days:
          type: integer
          minimum: 0
          example: 3
        personal_info:
          type: object
          description: "Персональная информация игрока"
          properties:
            favorite_song:
              type: string
              nullable: true
              example: "Bohemian Rhapsody"
              description: "Любимая песня"
            favorite_movie:
              type: string
              nullable: true
              example: "Inception"
              description: "Любимый фильм"
            favorite_book:
              type: string
              nullable: true
              example: "1984"
              description: "Любимая книга"
            favorite_dish:
              type: string
              nullable: true
              example: "Пицца"
              description: "Любимое блюдо"
            best_friend_name:
              type: string
              nullable: true
              example: "Александр"
              description: "Имя лучшего друга"
        created_at:
          type: string
          format: date-time
          example: "2025-09-04T06:10:25.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-09-04T06:10:25.000000Z"

    PlayerState:
      type: object
      description: |
        # 🎮 PlayerState - Стандартизированный объект игрока
        
        **Ключевая особенность:** Этот объект присутствует во **ВСЕХ API ответах** (кроме auth), что обеспечивает единообразие для фронтенда.
        
        ## 🎯 Назначение
        - **Единая точка истины** для состояния игрока
        - **Реактивные обновления UI** на основе изменений
        - **Консистентность данных** между различными эндпоинтами
        - **Упрощение фронтенд логики** - один объект для всех компонентов
        
        ## 📊 Структура данных
        Объект содержит полную информацию о текущем состоянии игрока, включая:
        - Базовую информацию (ID, уровень)
        - Систему прогресса (опыт, уровни)
        - Ресурсы (энергия, стресс, тревожность)
        - Активность и возможности игрока
        - Временные метки для синхронизации
      properties:
        id:
          type: integer
          description: "🆔 Уникальный ID профиля игрока"
          example: 123
        user_id:
          type: integer
          description: "👤 ID пользователя владельца профиля"
          example: 456
        level:
          type: integer
          description: "🏆 Текущий уровень игрока"
          minimum: 1
          example: 5
        experience:
          type: object
          description: "⭐ Информация об опыте игрока"
          properties:
            total:
              type: integer
              description: "📊 Общее количество опыта за всё время"
              minimum: 0
              example: 450
            current_level:
              type: integer
              description: "📈 Опыт в пределах текущего уровня (0-99)"
              minimum: 0
              maximum: 99
              example: 50
            to_next_level:
              type: integer
              description: "🎯 Сколько опыта осталось до следующего уровня"
              minimum: 1
              maximum: 100
              example: 50
            progress_percentage:
              type: number
              description: "📊 Процент прогресса до следующего уровня"
              minimum: 0
              maximum: 100
              example: 50.0
        energy:
          type: object
          description: "⚡ Информация об энергии игрока"
          properties:
            current:
              type: integer
              description: "🔋 Текущее количество энергии"
              minimum: 0
              maximum: 200
              example: 120
            max:
              type: integer
              description: "⚡ Максимальное количество энергии"
              example: 200
            percentage:
              type: number
              description: "📊 Процент от максимальной энергии"
              minimum: 0
              maximum: 100
              example: 60.0
            status:
              type: object
              description: "🎨 Статус энергии с цветами для UI"
              properties:
                level:
                  type: string
                  description: |
                    📊 **Уровень энергии для UI индикаторов**
                    
                    Значения:
                    - `critical` (0-24%): Красный цвет, игрок не может выполнять действия
                    - `low` (25-49%): Оранжевый цвет, ограниченные возможности  
                    - `medium` (50-74%): Синий цвет, нормальное состояние
                    - `high` (75-100%): Зеленый цвет, отличное состояние
                  enum: ["critical", "low", "medium", "high"]
                  example: "medium"
                label:
                  type: string
                  description: "🏷️ Текстовое описание уровня энергии"
                  example: "Нормальный уровень энергии"
                color:
                  type: string
                  description: "🎨 HEX цвет для отображения в UI"
                  pattern: "^#[0-9A-F]{6}$"
                  example: "#2196F3"
        stress:
          type: object
          description: "😰 Информация о стрессе игрока"
          properties:
            current:
              type: integer
              description: "📊 Текущий уровень стресса (0-100)"
              minimum: 0
              maximum: 100
              example: 35
            percentage:
              type: number
              description: "📊 Стресс в процентах"
              minimum: 0
              maximum: 100
              example: 35.0
            level:
              type: object
              description: "🎯 Детальная информация об уровне стресса"
              properties:
                value:
                  type: string
                  description: |
                    📊 **Категория уровня стресса**
                    
                    Диапазоны стресса:
                    - `low` (0-20): Спокойное состояние, можно браться за сложные задачи
                    - `normal` (21-50): Обычное состояние, всё под контролем  
                    - `elevated` (51-80): Повышенная тревожность, нужна релаксация
                    - `high` (81-100): Высокий стресс, срочно нужен отдых
                    
                    💡 **Влияние на геймплей:**
                    - При high стрессе блокируются сложные ситуации
                    - При elevated рекомендуются расслабляющие активности
                    - При low/normal доступны все возможности
                  enum: ["low", "normal", "elevated", "high"]  
                  example: "normal"
                label:
                  type: string
                  description: "🏷️ Русское название уровня стресса"
                  example: "Нормальный"
                color:
                  type: string
                  description: "🎨 HEX цвет для UI"
                  pattern: "^#[0-9A-F]{6}$"
                  example: "#2196F3"
                recommended_actions:
                  type: array
                  description: "💡 Рекомендации по управлению стрессом"
                  items:
                    type: string
                  example: ["Поддерживайте текущий ритм", "Не забывайте о перерывах"]
        anxiety:
          type: object
          description: "😟 Информация о тревожности игрока"
          properties:
            current:
              type: integer
              description: "📊 Текущий уровень тревожности (0-100)"
              minimum: 0
              maximum: 100
              example: 25
            percentage:
              type: number
              description: "📊 Тревожность в процентах"
              minimum: 0
              maximum: 100
              example: 25.0
        activity:
          type: object
          description: "🕐 Информация об активности игрока"
          properties:
            last_login:
              type: string
              format: date-time
              description: "⏰ Время последнего входа в игру"
              example: "2025-09-28T10:30:00Z"
            consecutive_days:
              type: integer
              description: "📅 Количество дней подряд в игре"
              minimum: 0
              example: 7
            can_claim_daily_reward:
              type: boolean
              description: "🎁 Можно ли получить ежедневную награду"
              example: true
        sleep:
          type: object
          description: |
            😴 **Система сна персонажа**
            
            Персонаж засыпает после прохождения определенного количества ситуаций.
            Во время сна блокируются ситуации и микродействия (настраивается).
          oneOf:
            - type: object
              description: "Персонаж НЕ спит"
              properties:
                is_sleeping:
                  type: boolean
                  description: "Спит ли персонаж"
                  example: false
                sleeping_until:
                  type: null
                  description: "Время пробуждения (null если не спит)"
                  example: null
                situations_until_sleep:
                  type: integer
                  description: "Сколько ситуаций осталось до сна"
                  minimum: 0
                  example: 3
                completed_situations:
                  type: integer
                  description: "Сколько ситуаций пройдено с последнего сна"
                  minimum: 0
                  example: 7
                situations_limit:
                  type: integer
                  description: "Лимит ситуаций до сна (из конфига)"
                  minimum: 1
                  example: 10
            - type: object
              description: "Персонаж СПИТ"
              properties:
                is_sleeping:
                  type: boolean
                  description: "Спит ли персонаж"
                  example: true
                sleeping_until:
                  type: string
                  format: date-time
                  description: "Время когда персонаж проснется"
                  example: "2025-09-28T18:30:00Z"
                time_remaining_seconds:
                  type: integer
                  description: "Сколько секунд осталось до пробуждения"
                  example: 3600
                time_remaining_minutes:
                  type: integer
                  description: "Сколько минут осталось до пробуждения"
                  example: 60
        capabilities:
          type: object
          description: "🎮 Что может делать игрок в данный момент"
          properties:
            can_perform_micro_actions:
              type: boolean
              description: |
                ⚡ **Может ли выполнять микродействия**
                
                Условия: `energy >= 10`
                
                💡 **Использование в UI:**
                - Если `false` - кнопки микродействий неактивны
                - Показать сообщение "Недостаточно энергии"
                - Предложить отдых или ожидание регенерации
              example: true
            can_start_situations:
              type: boolean
              description: |
                🎯 **Может ли начинать новые ситуации**
                
                Условия: `energy >= 20 AND stress <= 80`
                
                💡 **Использование в UI:**
                - Если `false` из-за энергии - показать "Недостаточно энергии" 
                - Если `false` из-за стресса - показать "Слишком высокий стресс"
                - Предложить соответствующие действия для восстановления
              example: true
        customization:
          type: object
          description: "👔 Информация о кастомизации игрока"
          properties:
            new_customizables:
              type: array
              description: "🆕 Массив новых разблокированных элементов кастомизации для уведомлений"
              items:
                type: object
                properties:
                  key:
                    type: string
                    example: "wardrobe_shirt"
                    description: "Ключ категории кастомизации"
                  new_unlocked:
                    type: array
                    items:
                      type: integer
                    example: [4, 5]
                    description: "Массив ID новых разблокированных элементов"
              example:
                - key: "wardrobe_shirt"
                  new_unlocked: [4, 5]
                - key: "furniture_table"
                  new_unlocked: [3]
        timestamps:
          type: object
          description: "⏰ Временные метки"
          properties:
            created_at:
              type: string
              format: date-time
              description: "📅 Дата создания профиля"
              example: "2025-09-01T12:00:00Z"
            updated_at:
              type: string
              format: date-time
              description: "🔄 Дата последнего обновления"
              example: "2025-09-28T10:30:00Z"
      example:
        id: 123
        user_id: 456
        level: 5
        experience:
          total: 450
          current_level: 50
          to_next_level: 50
          progress_percentage: 50.0
        energy:
          current: 120
          max: 200
          percentage: 60.0
          status:
            level: "medium"
            label: "Нормальный уровень энергии"
            color: "#2196F3"
        stress:
          current: 35
          percentage: 35.0
          level:
            value: "normal"
            label: "Нормальный"
            color: "#2196F3"
            recommended_actions:
              - "Поддерживайте текущий ритм"
              - "Не забывайте о перерывах"
        anxiety:
          current: 25
          percentage: 25.0
        activity:
          last_login: "2025-09-28T10:30:00Z"
          consecutive_days: 7
          can_claim_daily_reward: true
        sleep:
          is_sleeping: false
          sleeping_until: null
          situations_until_sleep: 3
          completed_situations: 7
          situations_limit: 10
        capabilities:
          can_perform_micro_actions: true
          can_start_situations: true
        timestamps:
          created_at: "2025-09-01T12:00:00Z"
          updated_at: "2025-09-28T10:30:00Z"

    Situation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Сложная презентация на работе"
        description:
          type: string
          example: "Завтра у вас важная презентация перед руководством"
        category:
          type: string
          enum: [work, personal, health, social, education]
          example: "work"
        difficulty_level:
          type: string
          enum: [easy, medium, hard]
          example: "medium"
        min_level_required:
          type: integer
          minimum: 1
          example: 1
        stress_impact:
          type: integer
          minimum: -50
          maximum: 50
          example: 15
        experience_reward:
          type: integer
          minimum: 0
          example: 25
        is_active:
          type: boolean
          example: true
        position:
          type: string
          enum: [phone, tablet, desktop, tv, speaker, bookshelf, kitchen]
          example: "desktop"
          description: "Позиция/место где показывается ситуация"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        options:
          type: array
          items:
            $ref: '#/components/schemas/SituationOption'

    SituationOption:
      type: object
      properties:
        id:
          type: integer
          example: 1
        situation_id:
          type: integer
          example: 1
        text:
          type: string
          example: "Тщательно подготовиться и порепетировать"
        stress_change:
          type: integer
          minimum: -50
          maximum: 50
          example: -10
        experience_reward:
          type: integer
          minimum: 0
          example: 15
        energy_cost:
          type: integer
          minimum: 0
          example: 20
        min_level_required:
          type: integer
          minimum: 1
          example: 1
        order:
          type: integer
          example: 1

    MicroAction:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Глубокое дыхание 4-7-8"
        description:
          type: string
          example: "Техника дыхания: вдох на 4 счета, задержка на 7, выдох на 8. Повторить 4 раза."
        category:
          type: object
          properties:
            value:
              type: string
              enum: [relaxation, exercise, creativity, social]
              example: "relaxation"
            label:
              type: string
              example: "Релаксация"
            icon:
              type: string
              example: "🧘"
            color:
              type: string
              example: "#9C27B0"
        energy_reward:
          type: integer
          minimum: 0
          example: 15
          description: "Количество энергии, которое игрок получает при выполнении"
        experience_reward:
          type: integer
          minimum: 0
          example: 8
          description: "Количество опыта за выполнение"
        cooldown_minutes:
          type: integer
          minimum: 0
          example: 30
          description: "Время в минутах до повторного выполнения"
        unlock_level:
          type: integer
          minimum: 1
          example: 1
          description: "Минимальный уровень игрока для доступа"
        position:
          type: string
          enum: [phone, tablet, desktop, tv, speaker, bookshelf, kitchen]
          example: "phone"
          description: "Предпочтительная позиция/место для выполнения действия"
        can_perform:
          type: boolean
          example: true
          description: "Доступно ли действие для выполнения (не на кулдауне)"
        cooldown_ends_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-10-02T10:30:00.000000Z"
          description: "Время окончания кулдауна (если действие недоступно)"

    ActivityLog:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          nullable: true
          example: 1
        event_type:
          type: string
          example: "user.login"
        event_data:
          type: object
          nullable: true
          example:
            ip: "192.168.1.1"
            user_agent: "Mozilla/5.0..."
        ip_address:
          type: string
          nullable: true
          example: "192.168.1.1"
        user_agent:
          type: string
          nullable: true
          example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        created_at:
          type: string
          format: date-time
          example: "2025-09-04T06:10:25.000000Z"

    GameConfig:
      type: object
      properties:
        id:
          type: integer
          example: 1
        key:
          type: string
          example: "daily_reward_base_experience"
        value:
          type: string
          example: "50"
        description:
          type: string
          nullable: true
          example: "Базовое количество опыта за ежедневную награду"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Customization:
      type: object
      description: "Данные кастомизации для категории элементов"
      properties:
        key:
          type: string
          example: "wardrobe_shirt"
          description: "Уникальный ключ категории кастомизации"
        selected:
          type: integer
          example: 3
          description: "ID текущего выбранного элемента (может быть null)"
        available:
          type: array
          items:
            type: integer
          example: [1, 2, 4]
          description: "Массив ID доступных элементов для выбора (без текущего selected)"
        max:
          type: integer
          example: 10
          description: "Общее количество элементов в категории в игре"
        current_max:
          type: integer
          example: 7
          description: "Количество разблокированных элементов на текущем уровне игрока"
        next_unlock_level:
          type: array
          items:
            $ref: '../openapi.yaml#/components/schemas/CustomizationItem'
          example: [
            {
              "id": 3,
              "name": "Синяя футболка",
              "description": "Стильная синяя футболка",
              "unlock_level": 8,
              "order": 0,
              "is_default": false,
              "image_url": null
            }
          ]
          description: "Массив объектов элементов, которые будут разблокированы на следующих уровнях (пустой массив если все разблокировано)"

    CustomizationItem:
      type: object
      description: "Элемент кастомизации с информацией об уровне разблокировки"
      properties:
        id:
          type: integer
          example: 1
          description: "Уникальный ID элемента"
        name:
          type: string
          example: "Красная футболка"
          description: "Название элемента"
        description:
          type: string
          example: "Стильная красная футболка для повседневной носки"
          description: "Описание элемента"
        unlock_level:
          type: integer
          example: 5
          description: "Уровень игрока, на котором разблокируется элемент"
        order:
          type: integer
          example: 1
          description: "Порядок отображения в списке"
        is_default:
          type: boolean
          example: false
          description: "Является ли элемент элементом по умолчанию"
        image_url:
          type: string
          example: "https://example.com/images/shirt_red.png"
          description: "URL изображения элемента"

    UnlockLevelsCategory:
      type: object
      description: "Категория с информацией об уровнях разблокировки предметов"
      properties:
        category_key:
          type: string
          example: "wardrobe_shirt"
          description: "Уникальный ключ категории"
        category:
          type: string
          example: "Футболки и рубашки"
          description: "Название категории"
        items:
          type: array
          items:
            $ref: '#/components/schemas/CustomizationItem'
          description: "Список всех элементов в категории с уровнями разблокировки"


    CustomizationCategory:
      type: object
      description: "Информация о категории кастомизации"
      properties:
        key:
          type: string
          example: "wardrobe"
          description: "Ключ категории"
        label:
          type: string
          example: "Гардероб"
          description: "Человекопонятное название категории"
        icon:
          type: string
          example: "👔"
          description: "Эмодзи-иконка категории"
        description:
          type: string
          example: "Элементы одежды и аксессуары"
          description: "Описание категории"
        subcategories:
          type: array
          items:
            type: string
          example: ["wardrobe_shirt", "wardrobe_pants", "wardrobe_accessory"]
          description: "Массив ключей подкатегорий"

  responses:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Операция выполнена успешно"
        data:
          type: object
          
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Произошла ошибка"
        error:
          type: string
          example: "Подробное описание ошибки"
          
    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Ошибки валидации"
        errors:
          type: object
          example:
            email: ["Введите корректный email адрес"]
            password: ["Пароль должен содержать минимум 8 символов"]

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Пользователь успешно зарегистрирован"
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            player:
              $ref: '#/components/schemas/PlayerProfile'
            token:
              type: string
              example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            token_type:
              type: string
              example: "bearer"
            expires_in:
              type: integer
              example: 900
              description: "Время жизни токена в секундах"

paths:
  # Authentication endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Регистрация нового пользователя
      description: |
        Создает новый аккаунт пользователя с автоматическим созданием профиля игрока.
        
        **Требования к паролю:**
        - Минимум 8 символов
        - Минимум 1 строчная буква (a-z)
        - Минимум 1 заглавная буква (A-Z)  
        - Минимум 1 цифра (0-9)
        - Минимум 1 специальный символ (@$!%*?&)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - password_confirmation
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 255
                  pattern: "^[a-zA-Zа-яА-ЯёЁ\\s\\-'\\.]+$"
                  example: "Иван Иванов"
                  description: "Имя пользователя (только буквы, пробелы, дефисы, апострофы)"
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: "ivan@example.com"
                password:
                  type: string
                  minLength: 8
                  pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$"
                  example: "MyPass123!"
                  description: "Сложный пароль согласно требованиям"
                password_confirmation:
                  type: string
                  example: "MyPass123!"
                  description: "Подтверждение пароля (должно совпадать с password)"
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/responses/AuthResponse'
        '422':
          description: Ошибки валидации
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ValidationErrorResponse'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Вход в систему
      description: Аутентификация пользователя по email и паролю
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "ivan@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "MyPass123!"
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/responses/AuthResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/ErrorResponse'
                  - type: object
                    properties:
                      message:
                        example: "Неверные учетные данные"
        '422':
          description: Ошибки валидации
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ValidationErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Выход из системы
      description: Инвалидация JWT токена пользователя
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешный выход из системы
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: "Вы успешно вышли из системы"
        '401':
          description: Неавторизованный запрос
        '500':
          description: Ошибка при выходе из системы
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Обновление JWT токена
      description: Получение нового JWT токена без повторной авторизации
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Токен успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Токен успешно обновлен"
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                      token_type:
                        type: string
                        example: "bearer"
                      expires_in:
                        type: integer
                        example: 900
        '401':
          description: Не удалось обновить токен
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorResponse'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Запрос сброса пароля
      description: Отправка инструкций по сбросу пароля на email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "ivan@example.com"
      responses:
        '200':
          description: Инструкции отправлены
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: "Инструкции по сбросу пароля отправлены на email"
        '404':
          description: Пользователь не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/ErrorResponse'
                  - type: object
                    properties:
                      message:
                        example: "Пользователь с таким email не найден"
        '422':
          description: Ошибки валидации
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ValidationErrorResponse'

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Сброс пароля
      description: Установка нового пароля с использованием токена сброса
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - token
                - password
                - password_confirmation
              properties:
                email:
                  type: string
                  format: email
                  example: "ivan@example.com"
                token:
                  type: string
                  example: "reset_token_here"
                password:
                  type: string
                  minLength: 8
                  pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$"
                  example: "NewPass123!"
                password_confirmation:
                  type: string
                  example: "NewPass123!"
      responses:
        '200':
          description: Пароль успешно изменен
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: "Пароль успешно изменен"
        '400':
          description: Недействительный токен или email
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorResponse'
        '422':
          description: Ошибки валидации
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ValidationErrorResponse'

  /auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Подтверждение email
      description: Верификация email адреса пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  example: "verification_token_here"
      responses:
        '200':
          description: Email успешно подтвержден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/SuccessResponse'
                  - type: object
                    properties:
                      message:
                        example: "Email успешно подтвержден"
        '400':
          description: Недействительный токен
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/ErrorResponse'
                  - type: object
                    properties:
                      message:
                        example: "Недействительный токен"
        '422':
          description: Ошибки валидации
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ValidationErrorResponse'
    
  # Player endpoints
  /player/profile:
    $ref: './paths/player.yaml#/~1player~1profile'
  /player/personal-info:
    $ref: './paths/player.yaml#/~1player~1personal-info'
  /player/stats:
    $ref: './paths/player.yaml#/~1player~1stats'
  /player/daily-reward:
    $ref: './paths/player.yaml#/~1player~1daily-reward'
  /player/add-experience:
    $ref: './paths/player.yaml#/~1player~1add-experience'
  /player/update-energy:
    $ref: './paths/player.yaml#/~1player~1update-energy'
  /player/update-stress:
    $ref: './paths/player.yaml#/~1player~1update-stress'

  # Customization endpoints
  /customization:
    $ref: './paths/customization.yaml#/~1customization'
  /customization/{categoryKey}:
    $ref: './paths/customization.yaml#/~1customization~1{categoryKey}'
  /customization/viewed:
    $ref: './paths/customization.yaml#/~1customization~1viewed'

  # Situations endpoints
  /situations:
    $ref: './paths/situations.yaml#/~1situations'
  /situations/random:
    $ref: './paths/situations.yaml#/~1situations~1random'
  /situations/random-recommended:
    $ref: './paths/situations.yaml#/~1situations~1random-recommended'
  /situations/active:
    $ref: './paths/situations.yaml#/~1situations~1active'
  /situations/history:
    $ref: './paths/situations.yaml#/~1situations~1history'
  /situations/recommendations:
    $ref: './paths/situations.yaml#/~1situations~1recommendations'
  /situations/{id}:
    $ref: './paths/situations.yaml#/~1situations~1{id}'
  /situations/{id}/start:
    $ref: './paths/situations.yaml#/~1situations~1{id}~1start'
  /situations/{id}/complete:
    $ref: './paths/situations.yaml#/~1situations~1{id}~1complete'
    
  # Micro Actions endpoints
  /micro-actions:
    $ref: './paths/micro-actions.yaml#/~1micro-actions'
  /micro-actions/recommendations:
    $ref: './paths/micro-actions.yaml#/~1micro-actions~1recommendations'
  /micro-actions/recommendations/random:
    $ref: './paths/micro-actions.yaml#/~1micro-actions~1recommendations~1random'
  /micro-actions/history:
    $ref: './paths/micro-actions.yaml#/~1micro-actions~1history'
  /micro-actions/{id}/perform:
    $ref: './paths/micro-actions.yaml#/~1micro-actions~1{id}~1perform'
    
  # Admin endpoints (only for administrators)
  /admin/configs:
    $ref: './paths/admin.yaml#/~1admin~1configs'
  /admin/configs/{key}:
    $ref: './paths/admin.yaml#/~1admin~1configs~1{key}'
  /admin/situations:
    $ref: './paths/admin.yaml#/~1admin~1situations'
  /admin/situations/{id}:
    $ref: './paths/admin.yaml#/~1admin~1situations~1{id}'
    
  # Analytics endpoints
  /analytics/dashboard:
    $ref: './paths/analytics.yaml#/~1analytics~1dashboard'
  /analytics/player-behavior:
    $ref: './paths/analytics.yaml#/~1analytics~1player-behavior'
  /analytics/situation-stats:
    $ref: './paths/analytics.yaml#/~1analytics~1situation-stats'
  /analytics/activity-stats:
    $ref: './paths/analytics.yaml#/~1analytics~1activity-stats'