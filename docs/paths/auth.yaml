/auth/register:
  post:
    tags:
      - Authentication
    summary: Регистрация нового пользователя
    description: |
      Создает новый аккаунт пользователя с автоматическим созданием профиля игрока.
      
      **Требования к паролю:**
      - Минимум 8 символов
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - password
              - password_confirmation
            properties:
              name:
                type: string
                minLength: 2
                maxLength: 255
                pattern: '^[a-zA-Zа-яА-ЯёЁ\s\-\'\.]+$'
                example: "Иван Иванов"
                description: "Имя пользователя (только буквы, пробелы, дефисы, апострофы)"
              email:
                type: string
                format: email
                maxLength: 255
                example: "ivan@example.com"
              password:
                type: string
                minLength: 8
                example: "mypassword"
                description: "Пароль (минимум 8 символов)"
              password_confirmation:
                type: string
                example: "mypassword"
                description: "Подтверждение пароля (должно совпадать с password)"
    responses:
      '201':
        description: Пользователь успешно зарегистрирован
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/AuthResponse'
      '422':
        description: Ошибки валидации
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/ValidationErrorResponse'
      '500':
        description: Внутренняя ошибка сервера
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/ErrorResponse'

/auth/login:
  post:
    tags:
      - Authentication
    summary: Вход в систему
    description: Аутентификация пользователя по email и паролю
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                example: "ivan@example.com"
              password:
                type: string
                minLength: 6
                example: "MyPass123!"
    responses:
      '200':
        description: Успешная авторизация
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/AuthResponse'
      '401':
        description: Неверные учетные данные
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../openapi.yaml#/components/responses/ErrorResponse'
                - type: object
                  properties:
                    message:
                      example: "Неверные учетные данные"
      '422':
        description: Ошибки валидации
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/ValidationErrorResponse'

/auth/logout:
  post:
    tags:
      - Authentication
    summary: Выход из системы
    description: Инвалидация JWT токена пользователя
    security:
      - bearerAuth: []
    responses:
      '200':
        description: Успешный выход из системы
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../openapi.yaml#/components/responses/SuccessResponse'
                - type: object
                  properties:
                    message:
                      example: "Вы успешно вышли из системы"
      '401':
        description: Неавторизованный запрос
      '500':
        description: Ошибка при выходе из системы
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/ErrorResponse'

/auth/refresh:
  post:
    tags:
      - Authentication
    summary: Обновление JWT токена
    description: Получение нового JWT токена без повторной авторизации
    security:
      - bearerAuth: []
    responses:
      '200':
        description: Токен успешно обновлен
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: "Токен успешно обновлен"
                data:
                  type: object
                  properties:
                    token:
                      type: string
                      example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                    token_type:
                      type: string
                      example: "bearer"
                    expires_in:
                      type: integer
                      example: 900
      '401':
        description: Не удалось обновить токен
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/ErrorResponse'

/auth/forgot-password:
  post:
    tags:
      - Authentication
    summary: Запрос сброса пароля
    description: Отправка инструкций по сбросу пароля на email
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
                example: "ivan@example.com"
    responses:
      '200':
        description: Инструкции отправлены
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../openapi.yaml#/components/responses/SuccessResponse'
                - type: object
                  properties:
                    message:
                      example: "Инструкции по сбросу пароля отправлены на email"
      '404':
        description: Пользователь не найден
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../openapi.yaml#/components/responses/ErrorResponse'
                - type: object
                  properties:
                    message:
                      example: "Пользователь с таким email не найден"
      '422':
        description: Ошибки валидации
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/ValidationErrorResponse'

/auth/reset-password:
  post:
    tags:
      - Authentication
    summary: Сброс пароля
    description: Установка нового пароля с использованием токена сброса
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - token
              - password
              - password_confirmation
            properties:
              email:
                type: string
                format: email
                example: "ivan@example.com"
              token:
                type: string
                example: "reset_token_here"
              password:
                type: string
                minLength: 8
                pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$'
                example: "NewPass123!"
              password_confirmation:
                type: string
                example: "NewPass123!"
    responses:
      '200':
        description: Пароль успешно изменен
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../openapi.yaml#/components/responses/SuccessResponse'
                - type: object
                  properties:
                    message:
                      example: "Пароль успешно изменен"
      '400':
        description: Недействительный токен или email
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/ErrorResponse'
      '422':
        description: Ошибки валидации
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/ValidationErrorResponse'

/auth/verify-email:
  post:
    tags:
      - Authentication
    summary: Подтверждение email
    description: |
      Верификация email адреса пользователя с помощью кода из письма.
      Код отправляется на email при регистрации и действителен 24 часа.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - token
            properties:
              email:
                type: string
                format: email
                example: "ivan@example.com"
                description: "Email адрес пользователя"
              token:
                type: string
                example: "abc123def456ghi789jkl012mno345pqr678stu901vwx234yz5678901"
                description: "Код верификации из письма"
    responses:
      '200':
        description: Email успешно подтвержден
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../openapi.yaml#/components/responses/SuccessResponse'
                - type: object
                  properties:
                    message:
                      example: "Email успешно подтвержден"
      '400':
        description: Недействительный токен или истек срок действия
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../openapi.yaml#/components/responses/ErrorResponse'
                - type: object
                  properties:
                    message:
                      example: "Недействительный токен"
      '422':
        description: Ошибки валидации
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/ValidationErrorResponse'

/auth/resend-verification:
  post:
    tags:
      - Authentication
    summary: Повторная отправка кода верификации
    description: Отправка нового кода верификации email на указанный адрес
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
                example: "ivan@example.com"
    responses:
      '200':
        description: Письмо отправлено
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../openapi.yaml#/components/responses/SuccessResponse'
                - type: object
                  properties:
                    message:
                      example: "Письмо с подтверждением отправлено повторно"
      '400':
        description: Email уже подтвержден или пользователь не найден
        content:
          application/json:
            schema:
              allOf:
                - $ref: '../openapi.yaml#/components/responses/ErrorResponse'
                - type: object
                  properties:
                    message:
                      example: "Пользователь не найден или email уже подтвержден"
      '422':
        description: Ошибки валидации
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/responses/ValidationErrorResponse'
